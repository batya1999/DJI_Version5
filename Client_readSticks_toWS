import argparse
import time
from communication.address_util import get_default_ip
from communication.commands import to_msg
import websocket  # Make sure you use websocket-client package

from controller_reading.controllers import CalibratedController


def same_axes(a, b, epsilon) -> bool:
    if a is None and b is None:
        return True
    if a is None or b is None:
        return False
    return all(abs(a[k] - b[k]) <= epsilon for k in a)


def listen_to_joystick(ws):
    try:
        controller = CalibratedController()
    except Exception as e:
        print(f"Error while looking for controller: {e}")
        return

    bound = {
        "roll": 0.2,
        "pitch": 0.2,
        "yaw": 0.2,
        "throttle": 0.2,
        "camera": 0.1,
    }
    epsilon = 1
    last_axes = None
    last_btns = None

    while True:
        air_axes = controller.get_normalized_axes(new_range=(0, 255), bound=bound)
        buttons = controller.get_buttons()
        if air_axes and buttons and (not same_axes(air_axes, last_axes, epsilon=epsilon) or last_btns != buttons):
            last_axes = air_axes
            last_btns = buttons
            msg = to_msg(air_axes, controller.get_takeoff(buttons), controller.get_land(buttons))
            ws.send(msg)
        time.sleep(0.05)


def main():
    parser = argparse.ArgumentParser(description="WebSocket client")
    parser.add_argument("ip", nargs="?", default=get_default_ip(), help="Server IP address")
    parser.add_argument("-p", "--port", default="5000", help="Server port")
    parser.add_argument("-i", "--ip", help="Server IP address (alternative flag for compatibility)")

    args = parser.parse_args()

    ip = args.ip if args.ip else args.i
    port = args.port
    server_url = f"ws://{ip}:{port}"
    print(f"Connecting to {server_url}...")

    # Use WebSocketApp for WebSocket client connection (CORRECT)
    ws = websocket.WebSocketApp(
        server_url,
        on_open=listen_to_joystick,
        on_message=lambda websock, message: print('Received message:', message),
        on_error=lambda websock, error: print(f"Error: {error}"),
        on_close=lambda websock, close_status_code, close_msg: print("Disconnected from server"),
    )

    ws.run_forever()


if __name__ == "__main__":
    main()
